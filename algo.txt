Euclid Basic
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

# Example usage
a = 56
b = 98
print(f"The GCD of {a} and {b} is {gcd(a, b)}")

Extended:
def extended_gcd(a, b):
    if b == 0:
        return a, 1, 0
    else:
        g, x1, y1 = extended_gcd(b, a % b)
        x = y1
        y = x1 - (a // b) * y1
        return g, x, y

# Example usage
a = 56
b = 98
gcd_value, x, y = extended_gcd(a, b)
print(f"The GCD of {a} and {b} is {gcd_value}")
print(f"Coefficients: x = {x}, y = {y}")

Fermat:
import random

def fermat_test(n, k=5):
    if n <= 1:
        return False  # 1 and numbers less than 1 are not prime
    if n == 2 or n == 3:
        return True  # 2 and 3 are prime

    # Perform the test k times
    for _ in range(k):
        a = random.randint(2, n - 2)
        if pow(a, n - 1, n) != 1:
            return False  # If test fails for any a, n is composite
    return True  # If it passes for all a, n is likely prime

# Example usage
n = 29
print(f"Is {n} prime? {fermat_test(n)}")

Witness:
carmichael_numbers = [561, 1105, 1729, 2465, 2821, 6601]

for num in carmichael_numbers:
    print(f"{num} passes Fermat Test: {fermat_test(num)}")


Pollard:
import random
import math

# Function to calculate gcd
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

# Pollard's Rho Algorithm
def pollards_rho(n):
    if n % 2 == 0:
        return 2  # Return 2 if n is even

    # Define a function to generate the next number in the sequence
    def f(x, n):
        return (x*x + 1) % n

    # Initial values
    x = random.randint(2, n-1)
    y = x
    d = 1

    while d == 1:
        x = f(x, n)
        y = f(f(y, n), n)
        d = gcd(abs(x - y), n)

    # If d is not n, it is a factor of n
    return d

# Example usage
n = 8051  # Example composite number
factor = pollards_rho(n)
print(f"A factor of {n} is {factor}")

Mile:
import random

# Function to compute (x^y) % p using binary exponentiation
def mod_exp(x, y, p):
    result = 1
    x = x % p
    while y > 0:
        if (y & 1):  # If y is odd
            result = (result * x) % p
        y = y >> 1  # y = y // 2
        x = (x * x) % p
    return result

# Miller-Rabin primality test
def miller_rabin(n, k=5):
    if n <= 1:
        return False
    if n == 2:
        return True  # 2 is prime
    if n % 2 == 0:
        return False  # Even numbers are not prime

    # Write n-1 as 2^s * d
    s = 0
    d = n - 1
    while d % 2 == 0:
        s += 1
        d //= 2

    # Perform the test k times
    for _ in range(k):
        a = random.randint(2, n - 2)  # Choose a random base a
        x = mod_exp(a, d, n)  # Compute a^d % n
        if x == 1 or x == n - 1:
            continue  # This base passes, test another base
        for _ in range(s - 1):
            x = mod_exp(x, 2, n)  # Square x mod n
            if x == n - 1:
                break  # This base passes
        else:
            return False  # n is composite

    return True  # n is probably prime




# Public Class
class PublicClass:
    def __init__(self, name):
        self.name = name  # Public attribute

    def greet(self):
        return f"Hello, {self.name}!"  # Public method

# Private Class
class _PrivateClass:
    def __init__(self, secret):
        self.__secret = secret  # Private attribute (name mangling)

    def __reveal_secret(self):
        return f"The secret is: {self.__secret}"  # Private method (name mangling)

    # Public method to access the private method
    def reveal_secret(self):
        return self.__reveal_secret()

# Example usage

# PublicClass
public_instance = PublicClass("Alice")
print(public_instance.greet())  # Output: Hello, Alice!
print(public_instance.name)  # Accessing public attribute directly

# PrivateClass
private_instance = _PrivateClass("Hidden treasure")
# print(private_instance.__secret)  # Will raise an AttributeError (private attribute)
print(private_instance.reveal_secret())  # Output: The secret is: Hidden treasure

# The following would result in an error because of name mangling:
# print(private_instance.__reveal_secret())  # Will raise an AttributeError


# Example usage
n = 31
print(f"{n} is prime: {miller_rabin(n)}")

